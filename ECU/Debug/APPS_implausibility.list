
APPS_implausibility.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e0  080031e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031e8  080031e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  080031fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080031fc  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076fa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001650  00000000  00000000  00027736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00028d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  00029458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021717  00000000  00000000  00029a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085cb  00000000  00000000  0004b187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0fc0  00000000  00000000  00053752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf8  00000000  00000000  00124764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080031b8 	.word	0x080031b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080031b8 	.word	0x080031b8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <SetMotorOutputZero>:
}


// Command to set motor output to zero
void SetMotorOutputZero(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    // Set the appropriate value in the data payload to command the motor controller
    // In this example, assuming the motor controller expects 0 to indicate zero output
    TxData[0] = 0x00;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SetMotorOutputZero+0x1c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SetMotorOutputZero+0x20>)
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <SetMotorOutputZero+0x1c>)
 8000d56:	4905      	ldr	r1, [pc, #20]	; (8000d6c <SetMotorOutputZero+0x24>)
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <SetMotorOutputZero+0x28>)
 8000d5a:	f001 f8f8 	bl	8001f4e <HAL_CAN_AddTxMessage>
    {
        // Error handling if transmission fails
    }
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000040 	.word	0x20000040
 8000d68:	20000048 	.word	0x20000048
 8000d6c:	20000028 	.word	0x20000028
 8000d70:	200000dc 	.word	0x200000dc
 8000d74:	00000000 	.word	0x00000000

08000d78 <main>:
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f000 fb46 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f888 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f000 f9ca 	bl	800111c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d88:	f000 f8f0 	bl	8000f6c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d8c:	f000 f940 	bl	8001010 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000d90:	f000 f990 	bl	80010b4 <MX_CAN1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Start ADC conversion
	  HAL_ADC_Start(&hadc1);
 8000d94:	4838      	ldr	r0, [pc, #224]	; (8000e78 <main+0x100>)
 8000d96:	f000 fc13 	bl	80015c0 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 8000d9a:	4838      	ldr	r0, [pc, #224]	; (8000e7c <main+0x104>)
 8000d9c:	f000 fc10 	bl	80015c0 <HAL_ADC_Start>

	  // Wait for conversion to complete
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	4834      	ldr	r0, [pc, #208]	; (8000e78 <main+0x100>)
 8000da6:	f000 fd10 	bl	80017ca <HAL_ADC_PollForConversion>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000daa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dae:	4833      	ldr	r0, [pc, #204]	; (8000e7c <main+0x104>)
 8000db0:	f000 fd0b 	bl	80017ca <HAL_ADC_PollForConversion>

	  // Read ADC value
	  adc_value_1 = HAL_ADC_GetValue(&hadc1);
 8000db4:	4830      	ldr	r0, [pc, #192]	; (8000e78 <main+0x100>)
 8000db6:	f000 fd93 	bl	80018e0 <HAL_ADC_GetValue>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <main+0x108>)
 8000dc0:	801a      	strh	r2, [r3, #0]
	  adc_value_2 = HAL_ADC_GetValue(&hadc2);
 8000dc2:	482e      	ldr	r0, [pc, #184]	; (8000e7c <main+0x104>)
 8000dc4:	f000 fd8c 	bl	80018e0 <HAL_ADC_GetValue>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <main+0x10c>)
 8000dce:	801a      	strh	r2, [r3, #0]

	  // Convert ADC value to voltage
	  APPS_1 = adc_value_1 * 3.3 / 4096; // Assuming 12-bit ADC with 3.3V reference voltage
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <main+0x108>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb69 	bl	80004ac <__aeabi_i2d>
 8000dda:	a325      	add	r3, pc, #148	; (adr r3, 8000e70 <main+0xf8>)
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	f7ff fbce 	bl	8000580 <__aeabi_dmul>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <main+0x110>)
 8000df2:	f7ff fcef 	bl	80007d4 <__aeabi_ddiv>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f7ff fdd1 	bl	80009a4 <__aeabi_d2f>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <main+0x114>)
 8000e06:	6013      	str	r3, [r2, #0]
	  APPS_2 = adc_value_2 * 3.3 / 4096; // Assuming 12-bit ADC with 3.3V reference voltage
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <main+0x10c>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fb4d 	bl	80004ac <__aeabi_i2d>
 8000e12:	a317      	add	r3, pc, #92	; (adr r3, 8000e70 <main+0xf8>)
 8000e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e18:	f7ff fbb2 	bl	8000580 <__aeabi_dmul>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <main+0x110>)
 8000e2a:	f7ff fcd3 	bl	80007d4 <__aeabi_ddiv>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fdb5 	bl	80009a4 <__aeabi_d2f>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <main+0x118>)
 8000e3e:	6013      	str	r3, [r2, #0]

	  // Perform further processing with the voltage value
	  // For example, you can use it for control or calculations

	  // Stop ADC conversion
	  HAL_ADC_Stop(&hadc1);
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <main+0x100>)
 8000e42:	f000 fc8f 	bl	8001764 <HAL_ADC_Stop>
	  HAL_ADC_Stop(&hadc2);
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <main+0x104>)
 8000e48:	f000 fc8c 	bl	8001764 <HAL_ADC_Stop>

	  // Delay or do other tasks as needed
	  HAL_Delay(100);
 8000e4c:	2064      	movs	r0, #100	; 0x64
 8000e4e:	f000 fb4f 	bl	80014f0 <HAL_Delay>

	  if(APPS_1 != APPS_2)
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <main+0x114>)
 8000e54:	ed93 7a00 	vldr	s14, [r3]
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <main+0x118>)
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e66:	d095      	beq.n	8000d94 <main+0x1c>
	  {
		  SetMotorOutputZero();
 8000e68:	f7ff ff6e 	bl	8000d48 <SetMotorOutputZero>
	  HAL_ADC_Start(&hadc1);
 8000e6c:	e792      	b.n	8000d94 <main+0x1c>
 8000e6e:	bf00      	nop
 8000e70:	66666666 	.word	0x66666666
 8000e74:	400a6666 	.word	0x400a6666
 8000e78:	2000004c 	.word	0x2000004c
 8000e7c:	20000094 	.word	0x20000094
 8000e80:	20000104 	.word	0x20000104
 8000e84:	2000010c 	.word	0x2000010c
 8000e88:	40b00000 	.word	0x40b00000
 8000e8c:	20000108 	.word	0x20000108
 8000e90:	20000110 	.word	0x20000110

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2234      	movs	r2, #52	; 0x34
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 f980 	bl	80031a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <SystemClock_Config+0xd0>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <SystemClock_Config+0xd0>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <SystemClock_Config+0xd0>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <SystemClock_Config+0xd4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <SystemClock_Config+0xd4>)
 8000ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <SystemClock_Config+0xd4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f04:	2304      	movs	r3, #4
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f08:	23a8      	movs	r3, #168	; 0xa8
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f10:	2307      	movs	r3, #7
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fe81 	bl	8002c24 <HAL_RCC_OscConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f28:	f000 f920 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2105      	movs	r1, #5
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fb54 	bl	80025f8 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f56:	f000 f909 	bl	800116c <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	; 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <MX_ADC1_Init+0x9c>)
 8000f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <MX_ADC1_Init+0xa0>)
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fce:	f000 fab3 	bl	8001538 <HAL_ADC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f000 f8c8 	bl	800116c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fee:	f000 fc85 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f000 f8b8 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000004c 	.word	0x2000004c
 8001008:	40012000 	.word	0x40012000
 800100c:	0f000001 	.word	0x0f000001

08001010 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_ADC2_Init+0x98>)
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <MX_ADC2_Init+0x9c>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_ADC2_Init+0x98>)
 800102a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800102e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_ADC2_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_ADC2_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_ADC2_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_ADC2_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_ADC2_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_ADC2_Init+0x98>)
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <MX_ADC2_Init+0xa0>)
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_ADC2_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_ADC2_Init+0x98>)
 800105e:	2201      	movs	r2, #1
 8001060:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_ADC2_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_ADC2_Init+0x98>)
 800106c:	2201      	movs	r2, #1
 800106e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_ADC2_Init+0x98>)
 8001072:	f000 fa61 	bl	8001538 <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800107c:	f000 f876 	bl	800116c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001080:	2301      	movs	r3, #1
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_ADC2_Init+0x98>)
 8001092:	f000 fc33 	bl	80018fc <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800109c:	f000 f866 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000094 	.word	0x20000094
 80010ac:	40012100 	.word	0x40012100
 80010b0:	0f000001 	.word	0x0f000001

080010b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_CAN1_Init+0x60>)
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <MX_CAN1_Init+0x64>)
 80010bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_CAN1_Init+0x60>)
 80010c0:	2210      	movs	r2, #16
 80010c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_CAN1_Init+0x60>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_CAN1_Init+0x60>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_CAN1_Init+0x60>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_CAN1_Init+0x60>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <MX_CAN1_Init+0x60>)
 80010de:	2200      	movs	r2, #0
 80010e0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_CAN1_Init+0x60>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_CAN1_Init+0x60>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_CAN1_Init+0x60>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_CAN1_Init+0x60>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_CAN1_Init+0x60>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_CAN1_Init+0x60>)
 8001102:	f000 fe29 	bl	8001d58 <HAL_CAN_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 f82e 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200000dc 	.word	0x200000dc
 8001118:	40006400 	.word	0x40006400

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_GPIO_Init+0x4c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <MX_GPIO_Init+0x4c>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_GPIO_Init+0x4c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_GPIO_Init+0x4c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <MX_GPIO_Init+0x4c>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_GPIO_Init+0x4c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_MspInit+0x4c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_MspInit+0x4c>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <HAL_ADC_MspInit+0xd8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d128      	bne.n	800123c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a2c      	ldr	r2, [pc, #176]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001222:	2302      	movs	r3, #2
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	481c      	ldr	r0, [pc, #112]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001236:	f001 f84b 	bl	80022d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800123a:	e02c      	b.n	8001296 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d127      	bne.n	8001296 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800127e:	2302      	movs	r3, #2
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001292:	f001 f81d 	bl	80022d0 <HAL_GPIO_Init>
}
 8001296:	bf00      	nop
 8001298:	3730      	adds	r7, #48	; 0x30
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40012000 	.word	0x40012000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40012100 	.word	0x40012100

080012b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_CAN_MspInit+0x84>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12c      	bne.n	800132c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_CAN_MspInit+0x88>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_CAN_MspInit+0x88>)
 80012dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_CAN_MspInit+0x88>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_CAN_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_CAN_MspInit+0x88>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_CAN_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800130a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800131c:	2309      	movs	r3, #9
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_CAN_MspInit+0x8c>)
 8001328:	f000 ffd2 	bl	80022d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40006400 	.word	0x40006400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f890 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <SystemInit+0x20>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <SystemInit+0x20>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013be:	490e      	ldr	r1, [pc, #56]	; (80013f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d4:	4c0b      	ldr	r4, [pc, #44]	; (8001404 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013e2:	f7ff ffd7 	bl	8001394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e6:	f001 febb 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff fcc5 	bl	8000d78 <main>
  bx  lr    
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013fc:	080031f0 	.word	0x080031f0
  ldr r2, =_sbss
 8001400:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001404:	20000118 	.word	0x20000118

08001408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_Init+0x40>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_Init+0x40>)
 8001422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_Init+0x40>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 ff17 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f808 	bl	8001450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fe9a 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 ff21 	bl	80022b6 <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 fef7 	bl	800227e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000114 	.word	0x20000114

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000114 	.word	0x20000114

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008

08001538 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e033      	b.n	80015b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fe36 	bl	80011c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800157e:	f023 0302 	bic.w	r3, r3, #2
 8001582:	f043 0202 	orr.w	r2, r3, #2
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 fae8 	bl	8001b60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f023 0303 	bic.w	r3, r3, #3
 800159e:	f043 0201 	orr.w	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
 80015a6:	e001      	b.n	80015ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Start+0x1a>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e0b2      	b.n	8001740 <HAL_ADC_Start+0x180>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d018      	beq.n	8001622 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001600:	4b52      	ldr	r3, [pc, #328]	; (800174c <HAL_ADC_Start+0x18c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_ADC_Start+0x190>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0c9a      	lsrs	r2, r3, #18
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001614:	e002      	b.n	800161c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d17a      	bne.n	8001726 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166e:	d106      	bne.n	800167e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f023 0206 	bic.w	r2, r3, #6
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
 800167c:	e002      	b.n	8001684 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800168c:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_ADC_Start+0x194>)
 800168e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001698:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d12a      	bne.n	80016fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a2b      	ldr	r2, [pc, #172]	; (8001758 <HAL_ADC_Start+0x198>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d015      	beq.n	80016dc <HAL_ADC_Start+0x11c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_ADC_Start+0x19c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d105      	bne.n	80016c6 <HAL_ADC_Start+0x106>
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <HAL_ADC_Start+0x194>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00a      	beq.n	80016dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a25      	ldr	r2, [pc, #148]	; (8001760 <HAL_ADC_Start+0x1a0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d136      	bne.n	800173e <HAL_ADC_Start+0x17e>
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_ADC_Start+0x194>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d130      	bne.n	800173e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d129      	bne.n	800173e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	e020      	b.n	800173e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <HAL_ADC_Start+0x198>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d11b      	bne.n	800173e <HAL_ADC_Start+0x17e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d114      	bne.n	800173e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	e00b      	b.n	800173e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f043 0210 	orr.w	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	20000000 	.word	0x20000000
 8001750:	431bde83 	.word	0x431bde83
 8001754:	40012300 	.word	0x40012300
 8001758:	40012000 	.word	0x40012000
 800175c:	40012100 	.word	0x40012100
 8001760:	40012200 	.word	0x40012200

08001764 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_ADC_Stop+0x16>
 8001776:	2302      	movs	r3, #2
 8001778:	e021      	b.n	80017be <HAL_ADC_Stop+0x5a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0201 	bic.w	r2, r2, #1
 8001790:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d113      	bne.n	8001810 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f6:	d10b      	bne.n	8001810 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f043 0220 	orr.w	r2, r3, #32
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e063      	b.n	80018d8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001810:	f7ff fe62 	bl	80014d8 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001816:	e021      	b.n	800185c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181e:	d01d      	beq.n	800185c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_ADC_PollForConversion+0x6c>
 8001826:	f7ff fe57 	bl	80014d8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d212      	bcs.n	800185c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b02      	cmp	r3, #2
 8001842:	d00b      	beq.n	800185c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f043 0204 	orr.w	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e03d      	b.n	80018d8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d1d6      	bne.n	8001818 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f06f 0212 	mvn.w	r2, #18
 8001872:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d123      	bne.n	80018d6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001892:	2b00      	cmp	r3, #0
 8001894:	d11f      	bne.n	80018d6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d111      	bne.n	80018d6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1c>
 8001914:	2302      	movs	r3, #2
 8001916:	e113      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x244>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d925      	bls.n	8001974 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68d9      	ldr	r1, [r3, #12]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	3b1e      	subs	r3, #30
 800193e:	2207      	movs	r2, #7
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43da      	mvns	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	400a      	ands	r2, r1
 800194c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68d9      	ldr	r1, [r3, #12]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	4603      	mov	r3, r0
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4403      	add	r3, r0
 8001966:	3b1e      	subs	r3, #30
 8001968:	409a      	lsls	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e022      	b.n	80019ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6919      	ldr	r1, [r3, #16]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	2207      	movs	r2, #7
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	400a      	ands	r2, r1
 8001996:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6919      	ldr	r1, [r3, #16]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	4603      	mov	r3, r0
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4403      	add	r3, r0
 80019b0:	409a      	lsls	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d824      	bhi.n	8001a0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3b05      	subs	r3, #5
 80019d4:	221f      	movs	r2, #31
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	400a      	ands	r2, r1
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	3b05      	subs	r3, #5
 80019fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0a:	e04c      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d824      	bhi.n	8001a5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b23      	subs	r3, #35	; 0x23
 8001a26:	221f      	movs	r2, #31
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	400a      	ands	r2, r1
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3b23      	subs	r3, #35	; 0x23
 8001a50:	fa00 f203 	lsl.w	r2, r0, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5c:	e023      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b41      	subs	r3, #65	; 0x41
 8001a70:	221f      	movs	r2, #31
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b41      	subs	r3, #65	; 0x41
 8001a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_ADC_ConfigChannel+0x250>)
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_ADC_ConfigChannel+0x254>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d8>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d10b      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_ADC_ConfigChannel+0x254>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12b      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x23a>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_ADC_ConfigChannel+0x258>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d003      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0x1f4>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b11      	cmp	r3, #17
 8001aee:	d122      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_ADC_ConfigChannel+0x258>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d111      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_ADC_ConfigChannel+0x25c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_ADC_ConfigChannel+0x260>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	0c9a      	lsrs	r2, r3, #18
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b28:	e002      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f9      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40012300 	.word	0x40012300
 8001b50:	40012000 	.word	0x40012000
 8001b54:	10000012 	.word	0x10000012
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	431bde83 	.word	0x431bde83

08001b60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b68:	4b79      	ldr	r3, [pc, #484]	; (8001d50 <ADC_Init+0x1f0>)
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	021a      	lsls	r2, r3, #8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6899      	ldr	r1, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <ADC_Init+0x1f4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d022      	beq.n	8001c3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6899      	ldr	r1, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6899      	ldr	r1, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	e00f      	b.n	8001c5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0202 	bic.w	r2, r2, #2
 8001c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6899      	ldr	r1, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7e1b      	ldrb	r3, [r3, #24]
 8001c78:	005a      	lsls	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01b      	beq.n	8001cc4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001caa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6859      	ldr	r1, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	035a      	lsls	r2, r3, #13
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	e007      	b.n	8001cd4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	051a      	lsls	r2, r3, #20
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d16:	025a      	lsls	r2, r3, #9
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6899      	ldr	r1, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	029a      	lsls	r2, r3, #10
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40012300 	.word	0x40012300
 8001d54:	0f000001 	.word	0x0f000001

08001d58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0ed      	b.n	8001f46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fa9a 	bl	80012b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d8c:	f7ff fba4 	bl	80014d8 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d92:	e012      	b.n	8001dba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d94:	f7ff fba0 	bl	80014d8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b0a      	cmp	r3, #10
 8001da0:	d90b      	bls.n	8001dba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2205      	movs	r2, #5
 8001db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0c5      	b.n	8001f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0e5      	beq.n	8001d94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0202 	bic.w	r2, r2, #2
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd8:	f7ff fb7e 	bl	80014d8 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dde:	e012      	b.n	8001e06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001de0:	f7ff fb7a 	bl	80014d8 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b0a      	cmp	r3, #10
 8001dec:	d90b      	bls.n	8001e06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2205      	movs	r2, #5
 8001dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e09f      	b.n	8001f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e5      	bne.n	8001de0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e1b      	ldrb	r3, [r3, #24]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e007      	b.n	8001e3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7e5b      	ldrb	r3, [r3, #25]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7e9b      	ldrb	r3, [r3, #26]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d108      	bne.n	8001e82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e007      	b.n	8001e92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0220 	bic.w	r2, r2, #32
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7edb      	ldrb	r3, [r3, #27]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d108      	bne.n	8001eac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0210 	bic.w	r2, r2, #16
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e007      	b.n	8001ebc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0210 	orr.w	r2, r2, #16
 8001eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7f1b      	ldrb	r3, [r3, #28]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d108      	bne.n	8001ed6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e007      	b.n	8001ee6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0208 	bic.w	r2, r2, #8
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7f5b      	ldrb	r3, [r3, #29]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d108      	bne.n	8001f00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0204 	orr.w	r2, r2, #4
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e007      	b.n	8001f10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0204 	bic.w	r2, r2, #4
 8001f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	ea42 0103 	orr.w	r1, r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	1e5a      	subs	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b089      	sub	sp, #36	; 0x24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f6c:	7ffb      	ldrb	r3, [r7, #31]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d003      	beq.n	8001f7a <HAL_CAN_AddTxMessage+0x2c>
 8001f72:	7ffb      	ldrb	r3, [r7, #31]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	f040 80b8 	bne.w	80020ea <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80a0 	beq.w	80020da <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	0e1b      	lsrs	r3, r3, #24
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d907      	bls.n	8001fba <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e09e      	b.n	80020f8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fd6:	68f9      	ldr	r1, [r7, #12]
 8001fd8:	6809      	ldr	r1, [r1, #0]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3318      	adds	r3, #24
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	440b      	add	r3, r1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e00f      	b.n	8002008 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ff2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ffc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3318      	adds	r3, #24
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	440b      	add	r3, r1
 8002006:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6819      	ldr	r1, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3318      	adds	r3, #24
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	440b      	add	r3, r1
 8002018:	3304      	adds	r3, #4
 800201a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	7d1b      	ldrb	r3, [r3, #20]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d111      	bne.n	8002048 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3318      	adds	r3, #24
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	3304      	adds	r3, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	6811      	ldr	r1, [r2, #0]
 8002038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3318      	adds	r3, #24
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	440b      	add	r3, r1
 8002044:	3304      	adds	r3, #4
 8002046:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3307      	adds	r3, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	061a      	lsls	r2, r3, #24
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3306      	adds	r3, #6
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3305      	adds	r3, #5
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	4313      	orrs	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	3204      	adds	r2, #4
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	4610      	mov	r0, r2
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	6811      	ldr	r1, [r2, #0]
 8002070:	ea43 0200 	orr.w	r2, r3, r0
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	440b      	add	r3, r1
 800207a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800207e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3303      	adds	r3, #3
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	061a      	lsls	r2, r3, #24
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3302      	adds	r3, #2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3301      	adds	r3, #1
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	4313      	orrs	r3, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	4610      	mov	r0, r2
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	6811      	ldr	r1, [r2, #0]
 80020a6:	ea43 0200 	orr.w	r2, r3, r0
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	440b      	add	r3, r1
 80020b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80020b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3318      	adds	r3, #24
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	4413      	add	r3, r2
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	6811      	ldr	r1, [r2, #0]
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3318      	adds	r3, #24
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	440b      	add	r3, r1
 80020d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e00e      	b.n	80020f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e006      	b.n	80020f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
  }
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3724      	adds	r7, #36	; 0x24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002120:	4013      	ands	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800212c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <__NVIC_GetPriorityGrouping+0x18>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 0307 	and.w	r3, r3, #7
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	db0a      	blt.n	8002192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	490c      	ldr	r1, [pc, #48]	; (80021b4 <__NVIC_SetPriority+0x4c>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	440b      	add	r3, r1
 800218c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002190:	e00a      	b.n	80021a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4908      	ldr	r1, [pc, #32]	; (80021b8 <__NVIC_SetPriority+0x50>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	3b04      	subs	r3, #4
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	440b      	add	r3, r1
 80021a6:	761a      	strb	r2, [r3, #24]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f1c3 0307 	rsb	r3, r3, #7
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	bf28      	it	cs
 80021da:	2304      	movcs	r3, #4
 80021dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d902      	bls.n	80021ec <NVIC_EncodePriority+0x30>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3b03      	subs	r3, #3
 80021ea:	e000      	b.n	80021ee <NVIC_EncodePriority+0x32>
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	401a      	ands	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43d9      	mvns	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	4313      	orrs	r3, r2
         );
}
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002234:	d301      	bcc.n	800223a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002236:	2301      	movs	r3, #1
 8002238:	e00f      	b.n	800225a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <SysTick_Config+0x40>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002242:	210f      	movs	r1, #15
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f7ff ff8e 	bl	8002168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <SysTick_Config+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SysTick_Config+0x40>)
 8002254:	2207      	movs	r2, #7
 8002256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff47 	bl	8002104 <__NVIC_SetPriorityGrouping>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002290:	f7ff ff5c 	bl	800214c <__NVIC_GetPriorityGrouping>
 8002294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ff8e 	bl	80021bc <NVIC_EncodePriority>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff5d 	bl	8002168 <__NVIC_SetPriority>
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffb0 	bl	8002224 <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e165      	b.n	80025b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	f040 8154 	bne.w	80025b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d005      	beq.n	8002322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	2b02      	cmp	r3, #2
 8002320:	d130      	bne.n	8002384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2203      	movs	r2, #3
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b03      	cmp	r3, #3
 800238e:	d017      	beq.n	80023c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d123      	bne.n	8002414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80ae 	beq.w	80025b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_GPIO_Init+0x300>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a5c      	ldr	r2, [pc, #368]	; (80025d0 <HAL_GPIO_Init+0x300>)
 8002460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <HAL_GPIO_Init+0x300>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002472:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4f      	ldr	r2, [pc, #316]	; (80025d8 <HAL_GPIO_Init+0x308>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d025      	beq.n	80024ea <HAL_GPIO_Init+0x21a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4e      	ldr	r2, [pc, #312]	; (80025dc <HAL_GPIO_Init+0x30c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01f      	beq.n	80024e6 <HAL_GPIO_Init+0x216>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4d      	ldr	r2, [pc, #308]	; (80025e0 <HAL_GPIO_Init+0x310>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x212>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4c      	ldr	r2, [pc, #304]	; (80025e4 <HAL_GPIO_Init+0x314>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4b      	ldr	r2, [pc, #300]	; (80025e8 <HAL_GPIO_Init+0x318>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x20a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <HAL_GPIO_Init+0x31c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x206>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a49      	ldr	r2, [pc, #292]	; (80025f0 <HAL_GPIO_Init+0x320>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x202>
 80024ce:	2306      	movs	r3, #6
 80024d0:	e00c      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e00a      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024d6:	2305      	movs	r3, #5
 80024d8:	e008      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024da:	2304      	movs	r3, #4
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024de:	2303      	movs	r3, #3
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024ea:	2300      	movs	r3, #0
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f002 0203 	and.w	r2, r2, #3
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fc:	4935      	ldr	r1, [pc, #212]	; (80025d4 <HAL_GPIO_Init+0x304>)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250a:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <HAL_GPIO_Init+0x324>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252e:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002558:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <HAL_GPIO_Init+0x324>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002588:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_GPIO_Init+0x324>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_GPIO_Init+0x324>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	f67f ae96 	bls.w	80022ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40021400 	.word	0x40021400
 80025f0:	40021800 	.word	0x40021800
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0cc      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d90c      	bls.n	8002634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d044      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d119      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e067      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4934      	ldr	r1, [pc, #208]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fef6 	bl	80014d8 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7fe fef2 	bl	80014d8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e04f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d20c      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fe56 	bl	8001450 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	080031d0 	.word	0x080031d0
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c8:	b0ae      	sub	sp, #184	; 0xb8
 80027ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ea:	4bcb      	ldr	r3, [pc, #812]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	f200 8206 	bhi.w	8002c04 <HAL_RCC_GetSysClockFreq+0x440>
 80027f8:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002835 	.word	0x08002835
 8002804:	08002c05 	.word	0x08002c05
 8002808:	08002c05 	.word	0x08002c05
 800280c:	08002c05 	.word	0x08002c05
 8002810:	0800283d 	.word	0x0800283d
 8002814:	08002c05 	.word	0x08002c05
 8002818:	08002c05 	.word	0x08002c05
 800281c:	08002c05 	.word	0x08002c05
 8002820:	08002845 	.word	0x08002845
 8002824:	08002c05 	.word	0x08002c05
 8002828:	08002c05 	.word	0x08002c05
 800282c:	08002c05 	.word	0x08002c05
 8002830:	08002a35 	.word	0x08002a35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4bb9      	ldr	r3, [pc, #740]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800283a:	e1e7      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800283c:	4bb8      	ldr	r3, [pc, #736]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x35c>)
 800283e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002842:	e1e3      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002844:	4bb4      	ldr	r3, [pc, #720]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800284c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002850:	4bb1      	ldr	r3, [pc, #708]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d071      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285c:	4bae      	ldr	r3, [pc, #696]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002868:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800286c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002878:	2300      	movs	r3, #0
 800287a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800287e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002882:	4622      	mov	r2, r4
 8002884:	462b      	mov	r3, r5
 8002886:	f04f 0000 	mov.w	r0, #0
 800288a:	f04f 0100 	mov.w	r1, #0
 800288e:	0159      	lsls	r1, r3, #5
 8002890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002894:	0150      	lsls	r0, r2, #5
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4621      	mov	r1, r4
 800289c:	1a51      	subs	r1, r2, r1
 800289e:	6439      	str	r1, [r7, #64]	; 0x40
 80028a0:	4629      	mov	r1, r5
 80028a2:	eb63 0301 	sbc.w	r3, r3, r1
 80028a6:	647b      	str	r3, [r7, #68]	; 0x44
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80028b4:	4649      	mov	r1, r9
 80028b6:	018b      	lsls	r3, r1, #6
 80028b8:	4641      	mov	r1, r8
 80028ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028be:	4641      	mov	r1, r8
 80028c0:	018a      	lsls	r2, r1, #6
 80028c2:	4641      	mov	r1, r8
 80028c4:	1a51      	subs	r1, r2, r1
 80028c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80028c8:	4649      	mov	r1, r9
 80028ca:	eb63 0301 	sbc.w	r3, r3, r1
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80028dc:	4649      	mov	r1, r9
 80028de:	00cb      	lsls	r3, r1, #3
 80028e0:	4641      	mov	r1, r8
 80028e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e6:	4641      	mov	r1, r8
 80028e8:	00ca      	lsls	r2, r1, #3
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	4622      	mov	r2, r4
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
 80028f6:	462b      	mov	r3, r5
 80028f8:	460a      	mov	r2, r1
 80028fa:	eb42 0303 	adc.w	r3, r2, r3
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800290c:	4629      	mov	r1, r5
 800290e:	024b      	lsls	r3, r1, #9
 8002910:	4621      	mov	r1, r4
 8002912:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002916:	4621      	mov	r1, r4
 8002918:	024a      	lsls	r2, r1, #9
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002922:	2200      	movs	r2, #0
 8002924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002928:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800292c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002930:	f7fe f888 	bl	8000a44 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4613      	mov	r3, r2
 800293a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800293e:	e067      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002940:	4b75      	ldr	r3, [pc, #468]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	2200      	movs	r2, #0
 8002948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800294c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002958:	67bb      	str	r3, [r7, #120]	; 0x78
 800295a:	2300      	movs	r3, #0
 800295c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800295e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002962:	4622      	mov	r2, r4
 8002964:	462b      	mov	r3, r5
 8002966:	f04f 0000 	mov.w	r0, #0
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	0159      	lsls	r1, r3, #5
 8002970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002974:	0150      	lsls	r0, r2, #5
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4621      	mov	r1, r4
 800297c:	1a51      	subs	r1, r2, r1
 800297e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002980:	4629      	mov	r1, r5
 8002982:	eb63 0301 	sbc.w	r3, r3, r1
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002994:	4649      	mov	r1, r9
 8002996:	018b      	lsls	r3, r1, #6
 8002998:	4641      	mov	r1, r8
 800299a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800299e:	4641      	mov	r1, r8
 80029a0:	018a      	lsls	r2, r1, #6
 80029a2:	4641      	mov	r1, r8
 80029a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80029a8:	4649      	mov	r1, r9
 80029aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029c2:	4692      	mov	sl, r2
 80029c4:	469b      	mov	fp, r3
 80029c6:	4623      	mov	r3, r4
 80029c8:	eb1a 0303 	adds.w	r3, sl, r3
 80029cc:	623b      	str	r3, [r7, #32]
 80029ce:	462b      	mov	r3, r5
 80029d0:	eb4b 0303 	adc.w	r3, fp, r3
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029e2:	4629      	mov	r1, r5
 80029e4:	028b      	lsls	r3, r1, #10
 80029e6:	4621      	mov	r1, r4
 80029e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ec:	4621      	mov	r1, r4
 80029ee:	028a      	lsls	r2, r1, #10
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029f8:	2200      	movs	r2, #0
 80029fa:	673b      	str	r3, [r7, #112]	; 0x70
 80029fc:	677a      	str	r2, [r7, #116]	; 0x74
 80029fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a02:	f7fe f81f 	bl	8000a44 <__aeabi_uldivmod>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a10:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a32:	e0eb      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a40:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d06b      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	2200      	movs	r2, #0
 8002a54:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a60:	2300      	movs	r3, #0
 8002a62:	667b      	str	r3, [r7, #100]	; 0x64
 8002a64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a68:	4622      	mov	r2, r4
 8002a6a:	462b      	mov	r3, r5
 8002a6c:	f04f 0000 	mov.w	r0, #0
 8002a70:	f04f 0100 	mov.w	r1, #0
 8002a74:	0159      	lsls	r1, r3, #5
 8002a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a7a:	0150      	lsls	r0, r2, #5
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4621      	mov	r1, r4
 8002a82:	1a51      	subs	r1, r2, r1
 8002a84:	61b9      	str	r1, [r7, #24]
 8002a86:	4629      	mov	r1, r5
 8002a88:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a9a:	4659      	mov	r1, fp
 8002a9c:	018b      	lsls	r3, r1, #6
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aa4:	4651      	mov	r1, sl
 8002aa6:	018a      	lsls	r2, r1, #6
 8002aa8:	4651      	mov	r1, sl
 8002aaa:	ebb2 0801 	subs.w	r8, r2, r1
 8002aae:	4659      	mov	r1, fp
 8002ab0:	eb63 0901 	sbc.w	r9, r3, r1
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ac0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ac4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ac8:	4690      	mov	r8, r2
 8002aca:	4699      	mov	r9, r3
 8002acc:	4623      	mov	r3, r4
 8002ace:	eb18 0303 	adds.w	r3, r8, r3
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	462b      	mov	r3, r5
 8002ad6:	eb49 0303 	adc.w	r3, r9, r3
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ae8:	4629      	mov	r1, r5
 8002aea:	024b      	lsls	r3, r1, #9
 8002aec:	4621      	mov	r1, r4
 8002aee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002af2:	4621      	mov	r1, r4
 8002af4:	024a      	lsls	r2, r1, #9
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002afe:	2200      	movs	r2, #0
 8002b00:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b08:	f7fd ff9c 	bl	8000a44 <__aeabi_uldivmod>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4613      	mov	r3, r2
 8002b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b16:	e065      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x420>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b24:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x458>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4611      	mov	r1, r2
 8002b30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b34:	653b      	str	r3, [r7, #80]	; 0x50
 8002b36:	2300      	movs	r3, #0
 8002b38:	657b      	str	r3, [r7, #84]	; 0x54
 8002b3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b3e:	4642      	mov	r2, r8
 8002b40:	464b      	mov	r3, r9
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	0159      	lsls	r1, r3, #5
 8002b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b50:	0150      	lsls	r0, r2, #5
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4641      	mov	r1, r8
 8002b58:	1a51      	subs	r1, r2, r1
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b70:	4659      	mov	r1, fp
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	4651      	mov	r1, sl
 8002b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7a:	4651      	mov	r1, sl
 8002b7c:	018a      	lsls	r2, r1, #6
 8002b7e:	4651      	mov	r1, sl
 8002b80:	1a54      	subs	r4, r2, r1
 8002b82:	4659      	mov	r1, fp
 8002b84:	eb63 0501 	sbc.w	r5, r3, r1
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	00eb      	lsls	r3, r5, #3
 8002b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b96:	00e2      	lsls	r2, r4, #3
 8002b98:	4614      	mov	r4, r2
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	4643      	mov	r3, r8
 8002b9e:	18e3      	adds	r3, r4, r3
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	eb45 0303 	adc.w	r3, r5, r3
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	028b      	lsls	r3, r1, #10
 8002bba:	4621      	mov	r1, r4
 8002bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	028a      	lsls	r2, r1, #10
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bcc:	2200      	movs	r2, #0
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bd6:	f7fd ff35 	bl	8000a44 <__aeabi_uldivmod>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4613      	mov	r3, r2
 8002be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x458>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0f1b      	lsrs	r3, r3, #28
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c02:	e003      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	37b8      	adds	r7, #184	; 0xb8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	00f42400 	.word	0x00f42400

08002c24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e28d      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8083 	beq.w	8002d4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c44:	4b94      	ldr	r3, [pc, #592]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d019      	beq.n	8002c84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c50:	4b91      	ldr	r3, [pc, #580]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c5c:	4b8e      	ldr	r3, [pc, #568]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c68:	d00c      	beq.n	8002c84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6a:	4b8b      	ldr	r3, [pc, #556]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d112      	bne.n	8002c9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c76:	4b88      	ldr	r3, [pc, #544]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c82:	d10b      	bne.n	8002c9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	4b84      	ldr	r3, [pc, #528]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d05b      	beq.n	8002d48 <HAL_RCC_OscConfig+0x124>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d157      	bne.n	8002d48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e25a      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca4:	d106      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x90>
 8002ca6:	4b7c      	ldr	r3, [pc, #496]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7b      	ldr	r2, [pc, #492]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xcc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xb4>
 8002cbe:	4b76      	ldr	r3, [pc, #472]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a75      	ldr	r2, [pc, #468]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a72      	ldr	r2, [pc, #456]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0xcc>
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a6e      	ldr	r2, [pc, #440]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b6c      	ldr	r3, [pc, #432]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a6b      	ldr	r2, [pc, #428]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fbee 	bl	80014d8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe fbea 	bl	80014d8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e21f      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xdc>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fbda 	bl	80014d8 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe fbd6 	bl	80014d8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e20b      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x104>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d06f      	beq.n	8002e36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d56:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d017      	beq.n	8002d92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d62:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d11c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d86:	4b44      	ldr	r3, [pc, #272]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d116      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x186>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e1d3      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4937      	ldr	r1, [pc, #220]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	e03a      	b.n	8002e36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc8:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCC_OscConfig+0x278>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe fb83 	bl	80014d8 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fb7f 	bl	80014d8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e1b4      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4925      	ldr	r1, [pc, #148]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCC_OscConfig+0x278>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe fb62 	bl	80014d8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe fb5e 	bl	80014d8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e193      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d036      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fe fb42 	bl	80014d8 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e58:	f7fe fb3e 	bl	80014d8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e173      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x234>
 8002e76:	e01b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fb2b 	bl	80014d8 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	e00e      	b.n	8002ea4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fe fb27 	bl	80014d8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d907      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e15c      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	42470000 	.word	0x42470000
 8002ea0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea4:	4b8a      	ldr	r3, [pc, #552]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ea      	bne.n	8002e86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8097 	beq.w	8002fec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec2:	4b83      	ldr	r3, [pc, #524]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	4b7f      	ldr	r3, [pc, #508]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a7e      	ldr	r2, [pc, #504]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b7c      	ldr	r3, [pc, #496]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eee:	4b79      	ldr	r3, [pc, #484]	; (80030d4 <HAL_RCC_OscConfig+0x4b0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d118      	bne.n	8002f2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efa:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_RCC_OscConfig+0x4b0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a75      	ldr	r2, [pc, #468]	; (80030d4 <HAL_RCC_OscConfig+0x4b0>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f06:	f7fe fae7 	bl	80014d8 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0e:	f7fe fae3 	bl	80014d8 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e118      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	4b6c      	ldr	r3, [pc, #432]	; (80030d4 <HAL_RCC_OscConfig+0x4b0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x31e>
 8002f34:	4b66      	ldr	r3, [pc, #408]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a65      	ldr	r2, [pc, #404]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	e01c      	b.n	8002f7c <HAL_RCC_OscConfig+0x358>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x340>
 8002f4a:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a60      	ldr	r2, [pc, #384]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
 8002f56:	4b5e      	ldr	r3, [pc, #376]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a5d      	ldr	r2, [pc, #372]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0x358>
 8002f64:	4b5a      	ldr	r3, [pc, #360]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a59      	ldr	r2, [pc, #356]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	4b57      	ldr	r3, [pc, #348]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a56      	ldr	r2, [pc, #344]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	f023 0304 	bic.w	r3, r3, #4
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d015      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe faa8 	bl	80014d8 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe faa4 	bl	80014d8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0d7      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	4b4b      	ldr	r3, [pc, #300]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0ee      	beq.n	8002f8c <HAL_RCC_OscConfig+0x368>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fa92 	bl	80014d8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fa8e 	bl	80014d8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e0c1      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fce:	4b40      	ldr	r3, [pc, #256]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ee      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	4a3a      	ldr	r2, [pc, #232]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80ad 	beq.w	8003150 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff6:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d060      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d145      	bne.n	8003096 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300a:	4b33      	ldr	r3, [pc, #204]	; (80030d8 <HAL_RCC_OscConfig+0x4b4>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe fa62 	bl	80014d8 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe fa5e 	bl	80014d8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e093      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	3b01      	subs	r3, #1
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	071b      	lsls	r3, r3, #28
 8003062:	491b      	ldr	r1, [pc, #108]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x4b4>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe fa33 	bl	80014d8 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe fa2f 	bl	80014d8 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e064      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x452>
 8003094:	e05c      	b.n	8003150 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x4b4>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fa1c 	bl	80014d8 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fa18 	bl	80014d8 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e04d      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_OscConfig+0x4ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x480>
 80030c2:	e045      	b.n	8003150 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e040      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40007000 	.word	0x40007000
 80030d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030dc:	4b1f      	ldr	r3, [pc, #124]	; (800315c <HAL_RCC_OscConfig+0x538>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d030      	beq.n	800314c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d129      	bne.n	800314c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d122      	bne.n	800314c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003114:	4293      	cmp	r3, r2
 8003116:	d119      	bne.n	800314c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	3b01      	subs	r3, #1
 8003126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d10f      	bne.n	800314c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	4d0d      	ldr	r5, [pc, #52]	; (8003198 <__libc_init_array+0x38>)
 8003164:	4c0d      	ldr	r4, [pc, #52]	; (800319c <__libc_init_array+0x3c>)
 8003166:	1b64      	subs	r4, r4, r5
 8003168:	10a4      	asrs	r4, r4, #2
 800316a:	2600      	movs	r6, #0
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	4d0b      	ldr	r5, [pc, #44]	; (80031a0 <__libc_init_array+0x40>)
 8003172:	4c0c      	ldr	r4, [pc, #48]	; (80031a4 <__libc_init_array+0x44>)
 8003174:	f000 f820 	bl	80031b8 <_init>
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	2600      	movs	r6, #0
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	f855 3b04 	ldr.w	r3, [r5], #4
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	080031e8 	.word	0x080031e8
 800319c:	080031e8 	.word	0x080031e8
 80031a0:	080031e8 	.word	0x080031e8
 80031a4:	080031ec 	.word	0x080031ec

080031a8 <memset>:
 80031a8:	4402      	add	r2, r0
 80031aa:	4603      	mov	r3, r0
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d100      	bne.n	80031b2 <memset+0xa>
 80031b0:	4770      	bx	lr
 80031b2:	f803 1b01 	strb.w	r1, [r3], #1
 80031b6:	e7f9      	b.n	80031ac <memset+0x4>

080031b8 <_init>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr

080031c4 <_fini>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr
